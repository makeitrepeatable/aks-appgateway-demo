trigger:
- master

resources:
  repositories:
    - repository: frontend
      type: git
      name: xlabs/xlabs-venue-web
      ref: refs/heads/main
    - repository: backend
      type: git
      name: xlabs/xlabs-venue-api
      ref: refs/heads/main

parameters:
- name: images
  type: object
  default:
  - name: frontend
  - name: backend
variables:
  acrName: makeitrepeatable
  imageName: xlabs-venue-web
  dockerRegistryServiceConnection: makeitrepeatable-acr
stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
    - checkout: frontend
    - checkout: backend
    - bash: |
        wget https://packages.microsoft.com/config/ubuntu/21.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        rm packages-microsoft-prod.deb
        sudo apt-get update; \
        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y dotnet-sdk-6.0
      displayName: Install .NET SDK
    - bash: ls
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        workingDirectory: '$(System.DefaultWorkingDirectory)/xlabs-venue-api/'
    - task: Docker@2
      displayName: Build frontend an image and push to $(acrName)
      inputs:
        command: buildAndPush
        dockerfile: '$(System.DefaultWorkingDirectory)/xlabs-venue-web/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: xlabs-venue-web
        tags: |
          $(Build.BuildId)
    - task: Docker@2
      displayName: Build backend an image and push to $(acrName)
      inputs:
        command: buildAndPush
        dockerfile: '$(System.DefaultWorkingDirectory)/xlabs-venue-api/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: xlabs-venue-api
        tags: |
          $(Build.BuildId)


# - stage: Deploy
#   displayName: Deploy
#   jobs:
#   - job: Deploy
#     steps:
#     - task: DownloadBuildArtifacts@0
#       inputs:
#         artifactName: ${{ parameters.terraformArtifactName }}
#         downloadPath: ${{ parameters.terraformDirectory }}
#     - task: AzureCLI@1
#       displayName: 'setup az authentication'
#       inputs:
#         azureSubscription: '${{ parameters.serviceConnection }}'
#         addSpnToEnvironment: true
#         scriptLocation: inlineScript
#         failOnStandardError: 'true'
#         inlineScript: |
#           echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
#           echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
#           echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
#           echo "##vso[task.setvariable variable=ARM_TENANT_ID]${tenantId}"

#     - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
#       displayName: "Use terraform ${{ parameters.terraformVersion }}"
#       inputs:
#         terraformVersion: ${{ parameters.terraformVersion }}

#     - ${{ if ne(variables['Build.DefinitionName'], 'azure-b2c') }}:
#       - template: ../steps/terraform-init.yml
#         parameters:
#           serviceConnection: ${{ parameters.serviceConnection }}
#           stateResourceGroup: ${{ parameters.stateResourceGroup }}
#           stateStorageAccount: ${{ parameters.stateStorageAccount }}
#           stateStorageContainer: ${{ parameters.stateStorageContainer }}
#           stateFileName: ${{ parameters.stateFileName }}
#           terraformDirectory: ${{ parameters.terraformDirectory }}
#           terraformVersion: ${{ parameters.terraformVersion }}
#     - task: AzureCLI@1
#       inputs:
#         azureSubscription: '${{ parameters.serviceConnection }}'
#         scriptLocation: inlineScript
#         failOnStandardError: 'true'
#         workingDirectory: ${{ parameters.terraformDirectory }}/${{ parameters.terraformArtifactName }}
#         inlineScript: |
#           ls
#           chmod -R 700 .terraform/
#           terraform apply plan.out
#       displayName: 'terraform apply'
#       env:
#         ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#         ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#         ARM_TENANT_ID: $(ARM_TENANT_ID)
      # - task: AzureCLI@1
      #   displayName: 'set kubectl context'
      #   inputs:
      #     azureSubscription: ${{ parameters.azureSubscription }}
      #     scriptLocation: inlineScript
      #     inlineScript: |
      #       az aks get-credentials -n ${{ parameters.aksName }} -g ${{ parameters.aksRgName }} --admin
      #       kubectl config use-context  ${{ parameters.aksName }}-admin

      #kubectl create ns
      #kubectl create -f aks-config/deployment.yaml
      #az aks update -n myAKSCluster -g myResourceGroup --attach-acr $MYACR


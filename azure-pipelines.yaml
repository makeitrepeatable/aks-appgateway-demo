trigger:
- master

resources:
  repositories:
    - repository: frontend
      type: git
      name: xlabs/xlabs-venue-web
      ref: refs/heads/main
    - repository: backend
      type: git
      name: xlabs/xlabs-venue-api
      ref: refs/heads/main

parameters:
- name: serviceConnection
  type: string
  default: makeitrepeatable
- name: stateStorageAccount
  type: string
  default: makeitrepeatabletfstates
- name: stateResourceGroup
  type: string
  default: makeitrepeatable-storage
- name: stateStorageContainer
  type: string
  default: tf-states
- name: stateFileName
  type: string
  default: xlabs.tfstate  
- name: prefix
  default: xlabs
- name: apps
  type: object
  default:
  - name: frontend
    repo: xlabs-venue-web
  - name: backend
    repo: xlabs-venue-api
variables:
  acrName: makeitrepeatable
  imageName: xlabs-venue-web
  dockerRegistryServiceConnection: makeitrepeatable-acr
stages:
# - stage: Build
#   displayName: Build
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - checkout: self
#     - ${{ each app in parameters.apps }}:
#       - checkout: ${{ app.name }}
#       - ${{ if eq(app.name, 'backend')}}:
#         - bash: |
#             wget https://packages.microsoft.com/config/ubuntu/21.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
#             sudo dpkg -i packages-microsoft-prod.deb
#             rm packages-microsoft-prod.deb
#             sudo apt-get update; \
#             sudo apt-get install -y apt-transport-https && \
#             sudo apt-get update && \
#             sudo apt-get install -y dotnet-sdk-3.1
#           displayName: Install .NET SDK
#         - task: DotNetCoreCLI@2
#           inputs:
#             command: 'build'
#             workingDirectory: ${{ app.repo }}
#       - task: Docker@2
#         displayName: Build ${{ app.name }} image and push to $(acrName)
#         inputs:
#           command: buildAndPush
#           dockerfile: '$(System.DefaultWorkingDirectory)/${{ app.repo }}/Dockerfile'
#           containerRegistry: $(dockerRegistryServiceConnection)
#           repository: ${{ app.name }}
#           tags: |
#             $(Build.BuildId)
- stage: Deploy_Infra
  displayName: Deploy Infra
#  dependsOn: Build
  jobs:
  - job: Terraform_Plan
    displayName: Terraform plan
    pool:
      vmImage: ubuntu-latest
    steps:  
      - checkout: self  
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Use terraform 1.1.0'
        inputs:
          terraformVersion: 1.1.0      
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault: makeitrepeatablekv'
        inputs:
          azuresubscription: ${{ parameters.serviceConnection }}
          KeyVaultName: makeitrepeatablekv
          SecretsFilter: '*'
      - task: qetza.replacetokens.replacetokens-task.replacetokens@3
        displayName: 'replace tokens k8s yaml'
        inputs:
          targetFiles: |
            **/*.yaml
          verbosity: on      
      - bash: |
          cat aks-config/frontend.yaml    
      - task: AzureCLI@1
        displayName: 'setup az authentication: ${{ parameters.serviceConnection }}'
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          addSpnToEnvironment: true
          scriptLocation: inlineScript
          failOnStandardError: 'true'
          inlineScript: |
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"
            echo "##vso[task.setvariable variable=ARM_OBJECT_ID]${servicePrincipalObjectId}"
      - bash: |
          echo 'object id: $(ARM_OBJECT_ID)'
          echo "${servicePrincipalObjectId}"
      - task: AzureCLI@2
        displayName: "Terraform init"
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          failOnStandardError: true
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            terraform init -input=false -backend-config=storage_account_name=${{ parameters.stateStorageAccount }} \
              -backend-config=resource_group_name=${{ parameters.stateResourceGroup }} \
              -backend-config=container_name=${{ parameters.stateStorageContainer }}
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)   
          TF_VAR_CLIENT_SECRET: $(ARM_CLIENT_SECRET) 
          TF_VAR_CLIENT_ID: $(ARM_CLIENT_ID)
          TF_VAR_OBJECT_ID: $(ARM_OBJECT_ID)
      - task: AzureCLI@2
        displayName: "Terraform plan"
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          addSpnToEnvironment: true
          failOnStandardError: true
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
              terraform plan -var 'prefix=xlabs' -input=false -out plan.out > tf.plan
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
          TF_VAR_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          TF_VAR_CLIENT_ID: $(ARM_CLIENT_ID)
          TF_VAR_OBJECT_ID: $(ARM_OBJECT_ID)

      - task: AzureCLI@1
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          scriptLocation: inlineScript
          failOnStandardError: 'true'
          inlineScript: |
            chmod -R 700 .terraform/
            terraform apply plan.out
        displayName: 'terraform apply'
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
          TF_VAR_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          TF_VAR_CLIENT_ID: $(ARM_CLIENT_ID)
          TF_VAR_OBJECT_ID: $(ARM_OBJECT_ID)
      - task: TerraformCLI@0
        displayName: 'terraform output'
        inputs:
            command: output      
      - task: PublishBuildArtifacts@1
        displayName: 'publish terraform files'
        inputs:
          artifactName: aksConfig
          PathtoPublish: ./aks-config/
- ${{ each app in parameters.apps }}:  
  - stage: Deploy_Apps_${{ app.name }}
    displayName: Deploy ${{ app.name }}
    dependsOn: deploy_infra
    jobs:
    - job: Deploy
      displayName: Deploy
      pool:
        vmImage: ubuntu-latest
      steps:
      - bash: |
          echo $(TF_OUT_IDENTITY_RESOURCE_ID)
          echo $(TF_OUT_IDENTITY_CLIENT_ID)
      - task: DownloadBuildArtifacts@0
        inputs:
          artifactName: aksConfig
          downloadPath: ./
      - task: AzureCLI@1
        displayName: 'set kubectl context'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptLocation: inlineScript
          inlineScript: |
            az aks get-credentials -n '${{ parameters.prefix }}-aks' -g '${{ parameters.prefix }}-aks-rg' --admin
            kubectl config use-context '${{ parameters.prefix }}-aks-admin'
      - task: AzureCLI@1
        displayName: 'create namespace'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptLocation: inlineScript
          inlineScript: |
            kubectl create namespace ${{ app.name }} --dry-run=server
            if [ ${?} -eq 0 ]
            then
              kubectl create namespace ${{ app.name }}
            fi          
      - task: AzureCLI@1
        displayName: 'create ${{ app.name }} deployment'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptLocation: inlineScript
          inlineScript: |
            kubectl apply -f aksConfig/${{ app.name }}.yaml
      - task: AzureCLI@1
        displayName: 'check ${{ app.name }} pod'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptLocation: inlineScript
          inlineScript: |
            kubectl get po 

      - task: AzureCLI@1
        displayName: 'install podidentity'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptLocation: inlineScript
          inlineScript: |
            kubectl create -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment.yaml
      - task: AzureCLI@1
        displayName: 'helm install'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptLocation: inlineScript
          inlineScript: |
            helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
            helm repo update
      - task: AzureCLI@1
        displayName: 'install ingress control chart'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptLocation: inlineScript
          inlineScript: |
            helm install -f helm-config/helm-config.yaml application-gateway-kubernetes-ingress/ingress-azure --generate-name            
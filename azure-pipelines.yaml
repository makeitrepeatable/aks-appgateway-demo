trigger:
- master

resources:
  repositories:
    - repository: frontend
      type: git
      name: xlabs/xlabs-venue-web
      ref: refs/heads/main
    - repository: backend
      type: git
      name: xlabs/xlabs-venue-api
      ref: refs/heads/main

parameters:
- name: serviceConnection
  type: string
  default: makeitrepeatable
- name: apps
  type: object
  default:
  - name: frontend
    repo: xlabs-venue-web
  #- name: backend
  #  repo: xlabs-venue-api
variables:
  acrName: makeitrepeatable
  imageName: xlabs-venue-web
  dockerRegistryServiceConnection: makeitrepeatable-acr
stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
    - ${{ each app in parameters.apps }}:
      - checkout: ${{ app.name }}
      - ${{ if eq(app.name, 'backend')}}:
        - bash: |
            wget https://packages.microsoft.com/config/ubuntu/21.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            rm packages-microsoft-prod.deb
            sudo apt-get update; \
            sudo apt-get install -y apt-transport-https && \
            sudo apt-get update && \
            sudo apt-get install -y dotnet-sdk-3.1
          displayName: Install .NET SDK
        - task: DotNetCoreCLI@2
          inputs:
            command: 'build'
            workingDirectory: ${{ app.repo }}
      - task: Docker@2
        displayName: Build ${{ app.name }} image and push to $(acrName)
        inputs:
          command: buildAndPush
          dockerfile: '$(System.DefaultWorkingDirectory)/${{ app.repo }}/Dockerfile'
          containerRegistry: $(dockerRegistryServiceConnection)
          repository: ${{ app.name }}
          tags: |
            $(Build.BuildId)
  - job: Deploy_Infra
    displayName: Deploy Infra
    pool:
      vmImage: ubuntu-latest
    steps:            
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Use terraform 1.1.0'
        inputs:
          terraformVersion: 1.1.0      
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault: makeitrepeatablekv'
        inputs:
          azuresubscription: ${{ parameters.serviceConnection }}
          KeyVaultName: makeitrepeatablekv
          SecretsFilter: '*'


  # - task: qetza.replacetokens.replacetokens-task.replacetokens@3
  #   displayName: 'replace tokens in terraform dir'
  #   inputs:
  #     targetFiles: |
  #       ${{ parameters.terraformDir }}/**/*.yml
  #       ${{ parameters.terraformDir }}/**/*.xml
  #       ${{ parameters.terraformDir }}/**/*.tfvars
  #     verbosity: on

      - task: AzureCLI@1
        displayName: 'setup az authentication: ${{ parameters.serviceConnection }}'
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          addSpnToEnvironment: true
          scriptLocation: inlineScript
          failOnStandardError: 'true'
          inlineScript: |
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"

# - stage: Deploy
#   displayName: Deploy
#   jobs:
#   - job: Deploy
#     steps:
#     - task: DownloadBuildArtifacts@0
#       inputs:
#         artifactName: ${{ parameters.terraformArtifactName }}
#         downloadPath: ${{ parameters.terraformDirectory }}
#     - task: AzureCLI@1
#       displayName: 'setup az authentication'
#       inputs:
#         azureSubscription: '${{ parameters.serviceConnection }}'
#         addSpnToEnvironment: true
#         scriptLocation: inlineScript
#         failOnStandardError: 'true'
#         inlineScript: |
#           echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
#           echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
#           echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
#           echo "##vso[task.setvariable variable=ARM_TENANT_ID]${tenantId}"

#     - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
#       displayName: "Use terraform ${{ parameters.terraformVersion }}"
#       inputs:
#         terraformVersion: ${{ parameters.terraformVersion }}

#     - ${{ if ne(variables['Build.DefinitionName'], 'azure-b2c') }}:
#       - template: ../steps/terraform-init.yml
#         parameters:
#           serviceConnection: ${{ parameters.serviceConnection }}
#           stateResourceGroup: ${{ parameters.stateResourceGroup }}
#           stateStorageAccount: ${{ parameters.stateStorageAccount }}
#           stateStorageContainer: ${{ parameters.stateStorageContainer }}
#           stateFileName: ${{ parameters.stateFileName }}
#           terraformDirectory: ${{ parameters.terraformDirectory }}
#           terraformVersion: ${{ parameters.terraformVersion }}
#     - task: AzureCLI@1
#       inputs:
#         azureSubscription: '${{ parameters.serviceConnection }}'
#         scriptLocation: inlineScript
#         failOnStandardError: 'true'
#         workingDirectory: ${{ parameters.terraformDirectory }}/${{ parameters.terraformArtifactName }}
#         inlineScript: |
#           ls
#           chmod -R 700 .terraform/
#           terraform apply plan.out
#       displayName: 'terraform apply'
#       env:
#         ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#         ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#         ARM_TENANT_ID: $(ARM_TENANT_ID)
      # - task: AzureCLI@1
      #   displayName: 'set kubectl context'
      #   inputs:
      #     azureSubscription: ${{ parameters.azureSubscription }}
      #     scriptLocation: inlineScript
      #     inlineScript: |
      #       az aks get-credentials -n ${{ parameters.aksName }} -g ${{ parameters.aksRgName }} --admin
      #       kubectl config use-context  ${{ parameters.aksName }}-admin

      #kubectl create ns
      #kubectl create -f aks-config/deployment.yaml
      #az aks update -n myAKSCluster -g myResourceGroup --attach-acr $MYACR


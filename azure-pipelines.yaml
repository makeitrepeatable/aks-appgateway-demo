trigger:
- master

resources:
  repositories:
    - repository: frontend
      type: git
      name: xlabs/xlabs-venue-web
      ref: refs/heads/main
    - repository: backend
      type: git
      name: xlabs/xlabs-venue-api
      ref: refs/heads/main

parameters:
- name: serviceConnection
  type: string
  default: makeitrepeatable
- name: stateStorageAccount
  type: string
  default: makeitrepeatabletfstates
- name: stateResourceGroup
  type: string
  default: makeitrepeatable-storage
- name: stateStorageContainer
  type: string
  default: tf-states
- name: stateFileName
  type: string
  default: xlabs.tfstate  
- name: system.debug
  default: true    
- name: args
  default: ${{ format('-var prefix=xlabs') }}

- name: apps
  type: object
  default:
  - name: frontend
    repo: xlabs-venue-web
  #- name: backend
  #  repo: xlabs-venue-api
variables:
  acrName: makeitrepeatable
  imageName: xlabs-venue-web
  dockerRegistryServiceConnection: makeitrepeatable-acr
stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
    - ${{ each app in parameters.apps }}:
      - checkout: ${{ app.name }}
      - ${{ if eq(app.name, 'backend')}}:
        - bash: |
            wget https://packages.microsoft.com/config/ubuntu/21.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            rm packages-microsoft-prod.deb
            sudo apt-get update; \
            sudo apt-get install -y apt-transport-https && \
            sudo apt-get update && \
            sudo apt-get install -y dotnet-sdk-3.1
          displayName: Install .NET SDK
        - task: DotNetCoreCLI@2
          inputs:
            command: 'build'
            workingDirectory: ${{ app.repo }}
      - task: Docker@2
        displayName: Build ${{ app.name }} image and push to $(acrName)
        inputs:
          command: buildAndPush
          dockerfile: '$(System.DefaultWorkingDirectory)/${{ app.repo }}/Dockerfile'
          containerRegistry: $(dockerRegistryServiceConnection)
          repository: ${{ app.name }}
          tags: |
            $(Build.BuildId)
- stage: Deploy_Infra
  displayName: Deploy Infra
  dependsOn: Build
  jobs:
  - job: Terraform_Plan
    displayName: Terraform plan
    pool:
      vmImage: ubuntu-latest
    steps:     
      - checkout: self  
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Use terraform 1.1.0'
        inputs:
          terraformVersion: 1.1.0      
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault: makeitrepeatablekv'
        inputs:
          azuresubscription: ${{ parameters.serviceConnection }}
          KeyVaultName: makeitrepeatablekv
          SecretsFilter: '*'


  # - task: qetza.replacetokens.replacetokens-task.replacetokens@3
  #   displayName: 'replace tokens in terraform dir'
  #   inputs:
  #     targetFiles: |
  #       ${{ parameters.terraformDir }}/**/*.yml
  #       ${{ parameters.terraformDir }}/**/*.xml
  #       ${{ parameters.terraformDir }}/**/*.tfvars
  #     verbosity: on

      - task: AzureCLI@1
        displayName: 'setup az authentication: ${{ parameters.serviceConnection }}'
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          addSpnToEnvironment: true
          scriptLocation: inlineScript
          failOnStandardError: 'true'
          inlineScript: |
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"
      - task: AzureCLI@2
        displayName: "Terraform init"
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          failOnStandardError: true
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            terraform init -input=false -backend-config=storage_account_name=${{ parameters.stateStorageAccount }} \
              -backend-config=resource_group_name=${{ parameters.stateResourceGroup }} \
              -backend-config=container_name=${{ parameters.stateStorageContainer }}
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)      
      - task: AzureCLI@2
        displayName: "Terraform plan"
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          addSpnToEnvironment: true
          failOnStandardError: true
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
              terraform plan ${{ parameters.extraArgs }} -input=false -out plan.out > tf.plan
              cat tf.plan
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)

      - task: AzureCLI@1
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          scriptLocation: inlineScript
          failOnStandardError: 'true'
          inlineScript: |
            chmod -R 700 .terraform/
            terraform apply plan.out
        displayName: 'terraform apply'
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
      - task: TerraformCLI@0
        displayName: 'terraform output'
        inputs:
          command: output
      - task: AzureCLI@1
        displayName: 'set kubectl context'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptLocation: inlineScript
          inlineScript: |
            az aks get-credentials -n $(TF_OUT_AKSNAME) -g $(TF_OUT_AKSRGNAME) --admin
            kubectl config use-context $(TF_OUT_AKSNAME)-admin
            kubectl create ns frontend
            kubectl create -f aks-config/frontend.yaml -n frontend
            kubectl get po -n frontend
- stage: Deploy_Apps
  displayName: Deploy apps
  dependsOn: Deploy_Infra
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      #kubectl create ns
      #kubectl create -f aks-config/deployment.yaml
      #az aks update -n myAKSCluster -g myResourceGroup --attach-acr $MYACR

